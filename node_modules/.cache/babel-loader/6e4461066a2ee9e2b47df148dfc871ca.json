{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport TableHeaderRow from './TableHeaderRow';\n\nfunction getHeaderRows(columns) {\n  var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var rows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : []; // eslint-disable-next-line no-param-reassign\n\n  rows[currentRow] = rows[currentRow] || [];\n  columns.forEach(function (column) {\n    if (column.rowSpan && rows.length < column.rowSpan) {\n      while (rows.length < column.rowSpan) {\n        rows.push([]);\n      }\n    }\n\n    var cell = {\n      key: column.key,\n      className: column.className || '',\n      children: column.title,\n      column: column\n    };\n\n    if (column.children) {\n      getHeaderRows(column.children, currentRow + 1, rows);\n    }\n\n    if ('colSpan' in column) {\n      cell.colSpan = column.colSpan;\n    }\n\n    if ('rowSpan' in column) {\n      cell.rowSpan = column.rowSpan;\n    }\n\n    if (cell.colSpan !== 0) {\n      rows[currentRow].push(cell);\n    }\n  });\n  return rows.filter(function (row) {\n    return row.length > 0;\n  });\n}\n\nvar TableHeader = function TableHeader(props, _ref) {\n  var table = _ref.table;\n  var components = table.components;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      showHeader = _table$props.showHeader,\n      onHeaderRow = _table$props.onHeaderRow;\n  var expander = props.expander,\n      columns = props.columns,\n      fixed = props.fixed;\n\n  if (!showHeader) {\n    return null;\n  }\n\n  var rows = getHeaderRows(columns);\n  expander.renderExpandIndentCell(rows, fixed);\n  var HeaderWrapper = components.header.wrapper;\n  return React.createElement(HeaderWrapper, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, index) {\n    return React.createElement(TableHeaderRow, {\n      prefixCls: prefixCls,\n      key: index,\n      index: index,\n      fixed: fixed,\n      columns: columns,\n      rows: rows,\n      row: row,\n      components: components,\n      onHeaderRow: onHeaderRow\n    });\n  }));\n};\n\nTableHeader.contextTypes = {\n  table: PropTypes.any\n};\nexport default TableHeader;","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/node_modules/rc-table/es/TableHeader.js"],"names":["React","PropTypes","TableHeaderRow","getHeaderRows","columns","currentRow","arguments","length","undefined","rows","forEach","column","rowSpan","push","cell","key","className","children","title","colSpan","filter","row","TableHeader","props","_ref","table","components","_table$props","prefixCls","showHeader","onHeaderRow","expander","fixed","renderExpandIndentCell","HeaderWrapper","header","wrapper","createElement","concat","map","index","contextTypes","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport TableHeaderRow from './TableHeaderRow';\n\nfunction getHeaderRows(columns) {\n  var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var rows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  // eslint-disable-next-line no-param-reassign\n  rows[currentRow] = rows[currentRow] || [];\n  columns.forEach(function (column) {\n    if (column.rowSpan && rows.length < column.rowSpan) {\n      while (rows.length < column.rowSpan) {\n        rows.push([]);\n      }\n    }\n\n    var cell = {\n      key: column.key,\n      className: column.className || '',\n      children: column.title,\n      column: column\n    };\n\n    if (column.children) {\n      getHeaderRows(column.children, currentRow + 1, rows);\n    }\n\n    if ('colSpan' in column) {\n      cell.colSpan = column.colSpan;\n    }\n\n    if ('rowSpan' in column) {\n      cell.rowSpan = column.rowSpan;\n    }\n\n    if (cell.colSpan !== 0) {\n      rows[currentRow].push(cell);\n    }\n  });\n  return rows.filter(function (row) {\n    return row.length > 0;\n  });\n}\n\nvar TableHeader = function TableHeader(props, _ref) {\n  var table = _ref.table;\n  var components = table.components;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      showHeader = _table$props.showHeader,\n      onHeaderRow = _table$props.onHeaderRow;\n  var expander = props.expander,\n      columns = props.columns,\n      fixed = props.fixed;\n\n  if (!showHeader) {\n    return null;\n  }\n\n  var rows = getHeaderRows(columns);\n  expander.renderExpandIndentCell(rows, fixed);\n  var HeaderWrapper = components.header.wrapper;\n  return React.createElement(HeaderWrapper, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, index) {\n    return React.createElement(TableHeaderRow, {\n      prefixCls: prefixCls,\n      key: index,\n      index: index,\n      fixed: fixed,\n      columns: columns,\n      rows: rows,\n      row: row,\n      components: components,\n      onHeaderRow: onHeaderRow\n    });\n  }));\n};\n\nTableHeader.contextTypes = {\n  table: PropTypes.any\n};\nexport default TableHeader;"]},"metadata":{},"sourceType":"module"}