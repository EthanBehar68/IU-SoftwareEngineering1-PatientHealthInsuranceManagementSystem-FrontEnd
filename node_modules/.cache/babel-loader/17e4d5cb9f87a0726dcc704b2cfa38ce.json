{"ast":null,"code":"import _objectSpread from \"/Users/jackjoliet/Documents/marketplace/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { apiCall } from \"../../services/api\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"../types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  return apiCall('post', `/api/register/worker`, userData).then(function (res) {\n    return {\n      complete: true\n    };\n  }).catch(function (err) {\n    return {\n      complete: false,\n      message: err.data.error\n    };\n  });\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  return apiCall('post', `/api/login/worker`, userData).then(function (res) {\n    const token = res.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token);\n    return apiCall('get', `/api/workers/${decoded.id}`).then(function (res) {\n      // Set current user\n      dispatch(setCurrentWorker(_objectSpread({}, decoded, {}, res[0])));\n      return {\n        complete: true\n      };\n    }).catch(function (err) {\n      console.log(err);\n      return {\n        complete: false,\n        message: err.data.error\n      };\n    });\n  }).catch(function (err) {\n    console.log(err);\n    return {\n      complete: false,\n      message: err.data.error\n    };\n  });\n}; // Set logged in user\n\nexport const setCurrentWorker = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutWorker = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentWorker({}));\n};","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/src/store/actions/workerauth.js"],"names":["apiCall","jwt_decode","setAuthToken","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","then","res","complete","catch","err","message","data","error","loginUser","token","localStorage","setItem","decoded","id","setCurrentWorker","console","log","type","payload","setUserLoading","logoutWorker","removeItem"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,SAAQC,UAAR,EAAoBC,gBAApB,EAAsCC,YAAtC,QAAyD,UAAzD,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7D,SAAOT,OAAO,CAAC,MAAD,EAAU,sBAAV,EAAiCO,QAAjC,CAAP,CACNG,IADM,CACD,UAASC,GAAT,EAAc;AAClB,WAAO;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAP;AACD,GAHM,EAINC,KAJM,CAIA,UAASC,GAAT,EAAc;AACnB,WAAO;AAACF,MAAAA,QAAQ,EAAE,KAAX;AAAkBG,MAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC;AAApC,KAAP;AACD,GANM,CAAP;AAOD,CARM,C,CASP;;AACA,OAAO,MAAMC,SAAS,GAAGX,QAAQ,IAAIE,QAAQ,IAAI;AAC/C,SAAOT,OAAO,CAAC,MAAD,EAAU,mBAAV,EAA8BO,QAA9B,CAAP,CACNG,IADM,CACD,UAASC,GAAT,EAAc;AAClB,UAAMQ,KAAK,GAAGR,GAAG,CAACQ,KAAlB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAFkB,CAGlB;;AACAjB,IAAAA,YAAY,CAACiB,KAAD,CAAZ,CAJkB,CAKlB;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B;AAEA,WAAOnB,OAAO,CAAC,KAAD,EAAS,gBAAesB,OAAO,CAACC,EAAG,EAAnC,CAAP,CACNb,IADM,CACD,UAASC,GAAT,EAAc;AAClB;AACAF,MAAAA,QAAQ,CAACe,gBAAgB,mBAAKF,OAAL,MAAiBX,GAAG,CAAC,CAAD,CAApB,EAAjB,CAAR;AACA,aAAO;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAP;AACD,KALM,EAMNC,KANM,CAMA,UAASC,GAAT,EAAc;AACnBW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACA,aAAO;AAACF,QAAAA,QAAQ,EAAE,KAAX;AAAkBG,QAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC;AAApC,OAAP;AACD,KATM,CAAP;AAWD,GApBM,EAqBNJ,KArBM,CAqBA,UAASC,GAAT,EAAc;AACnBW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACA,WAAO;AAACF,MAAAA,QAAQ,EAAE,KAAX;AAAkBG,MAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC;AAApC,KAAP;AACD,GAxBM,CAAP;AAyBD,CA1BM,C,CA2BP;;AACA,OAAO,MAAMO,gBAAgB,GAAGF,OAAO,IAAI;AACzC,SAAO;AACLK,IAAAA,IAAI,EAAEvB,gBADD;AAELwB,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAMO,cAAc,GAAG,MAAM;AAClC,SAAO;AACLF,IAAAA,IAAI,EAAEtB;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMyB,YAAY,GAAG,MAAMrB,QAAQ,IAAI;AAC5C;AACAW,EAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB,EAF4C,CAG5C;;AACA7B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAK5C;;AACAO,EAAAA,QAAQ,CAACe,gBAAgB,CAAC,EAAD,CAAjB,CAAR;AACD,CAPM","sourcesContent":["import {apiCall} from \"../../services/api\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\nimport {GET_ERRORS, SET_CURRENT_USER, USER_LOADING} from \"../types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  return apiCall('post', `/api/register/worker`, userData)\n  .then(function(res) {\n    return {complete: true};\n  })\n  .catch(function(err) {\n    return {complete: false, message: err.data.error};\n  });\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  return apiCall('post', `/api/login/worker`, userData)\n  .then(function(res) {\n    const token = res.token;\n    localStorage.setItem(\"jwtToken\", token);\n    // Set token to Auth header\n    setAuthToken(token);\n    // Decode token to get user data\n    const decoded = jwt_decode(token);\n\n    return apiCall('get', `/api/workers/${decoded.id}`)\n    .then(function(res) {\n      // Set current user\n      dispatch(setCurrentWorker({...decoded, ...res[0]}));\n      return {complete: true};\n    })\n    .catch(function(err) {\n      console.log(err);\n      return {complete: false, message: err.data.error};\n    });\n\n  })\n  .catch(function(err) {\n    console.log(err);\n    return {complete: false, message: err.data.error};\n  });\n};\n// Set logged in user\nexport const setCurrentWorker = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutWorker = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentWorker({}));\n};"]},"metadata":{},"sourceType":"module"}