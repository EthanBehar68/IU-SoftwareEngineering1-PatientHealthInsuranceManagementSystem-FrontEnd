{"ast":null,"code":"import _objectSpread from \"/Users/jackjoliet/Documents/marketplace/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { apiCall } from \"../../services/api\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"../types\"; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  return apiCall('post', `/api/login/admin`, userData).then(function (res) {\n    const token = res.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token);\n    return apiCall('get', `/api/admin/${decoded.id}`).then(function (res) {\n      // Set current user\n      dispatch(setCurrentAdmin(_objectSpread({}, decoded, {}, res[0])));\n      return {\n        complete: true\n      };\n    }).catch(function (err) {\n      console.log(err);\n      return {\n        complete: false,\n        message: err.data.error\n      };\n    });\n  }).catch(function (err) {\n    console.log(err);\n    return {\n      complete: false,\n      message: err.data.error\n    };\n  });\n}; // Set logged in user\n\nexport const setCurrentAdmin = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutAdmin = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentAdmin({}));\n};","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/src/store/actions/adminauth.js"],"names":["apiCall","jwt_decode","setAuthToken","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","loginUser","userData","dispatch","then","res","token","localStorage","setItem","decoded","id","setCurrentAdmin","complete","catch","err","console","log","message","data","error","type","payload","setUserLoading","logoutAdmin","removeItem"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,SAAQC,UAAR,EAAoBC,gBAApB,EAAsCC,YAAtC,QAAyD,UAAzD,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGC,QAAQ,IAAIC,QAAQ,IAAI;AAC/C,SAAOR,OAAO,CAAC,MAAD,EAAU,kBAAV,EAA6BO,QAA7B,CAAP,CACNE,IADM,CACD,UAASC,GAAT,EAAc;AAClB,UAAMC,KAAK,GAAGD,GAAG,CAACC,KAAlB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAFkB,CAGlB;;AACAT,IAAAA,YAAY,CAACS,KAAD,CAAZ,CAJkB,CAKlB;;AACA,UAAMG,OAAO,GAAGb,UAAU,CAACU,KAAD,CAA1B;AAEA,WAAOX,OAAO,CAAC,KAAD,EAAS,cAAac,OAAO,CAACC,EAAG,EAAjC,CAAP,CACNN,IADM,CACD,UAASC,GAAT,EAAc;AAClB;AACAF,MAAAA,QAAQ,CAACQ,eAAe,mBAAKF,OAAL,MAAiBJ,GAAG,CAAC,CAAD,CAApB,EAAhB,CAAR;AACA,aAAO;AAACO,QAAAA,QAAQ,EAAE;AAAX,OAAP;AACD,KALM,EAMNC,KANM,CAMA,UAASC,GAAT,EAAc;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAO;AAACF,QAAAA,QAAQ,EAAE,KAAX;AAAkBK,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASC;AAApC,OAAP;AACD,KATM,CAAP;AAWD,GApBM,EAqBNN,KArBM,CAqBA,UAASC,GAAT,EAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO;AAACF,MAAAA,QAAQ,EAAE,KAAX;AAAkBK,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASC;AAApC,KAAP;AACD,GAxBM,CAAP;AAyBD,CA1BM,C,CA2BP;;AACA,OAAO,MAAMR,eAAe,GAAGF,OAAO,IAAI;AACxC,SAAO;AACLW,IAAAA,IAAI,EAAErB,gBADD;AAELsB,IAAAA,OAAO,EAAEZ;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAMa,cAAc,GAAG,MAAM;AAClC,SAAO;AACLF,IAAAA,IAAI,EAAEpB;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMuB,WAAW,GAAG,MAAMpB,QAAQ,IAAI;AAC3C;AACAI,EAAAA,YAAY,CAACiB,UAAb,CAAwB,UAAxB,EAF2C,CAG3C;;AACA3B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ2C,CAK3C;;AACAM,EAAAA,QAAQ,CAACQ,eAAe,CAAC,EAAD,CAAhB,CAAR;AACD,CAPM","sourcesContent":["import {apiCall} from \"../../services/api\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\nimport {GET_ERRORS, SET_CURRENT_USER, USER_LOADING} from \"../types\";\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  return apiCall('post', `/api/login/admin`, userData)\n  .then(function(res) {\n    const token = res.token;\n    localStorage.setItem(\"jwtToken\", token);\n    // Set token to Auth header\n    setAuthToken(token);\n    // Decode token to get user data\n    const decoded = jwt_decode(token);\n\n    return apiCall('get', `/api/admin/${decoded.id}`)\n    .then(function(res) {\n      // Set current user\n      dispatch(setCurrentAdmin({...decoded, ...res[0]}));\n      return {complete: true};\n    })\n    .catch(function(err) {\n      console.log(err);\n      return {complete: false, message: err.data.error};\n    });\n\n  })\n  .catch(function(err) {\n    console.log(err);\n    return {complete: false, message: err.data.error};\n  });\n};\n// Set logged in user\nexport const setCurrentAdmin = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutAdmin = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentAdmin({}));\n};"]},"metadata":{},"sourceType":"module"}