{"ast":null,"code":"import _objectSpread from \"/Users/jackjoliet/Documents/marketplace/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jackjoliet/Documents/marketplace/front/src/containers/Customer/Products.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport { db_get_products } from \"../../store/actions/products\";\nimport sumItems from '../../utils/sumItems';\nimport moment from 'moment';\nimport empty from 'is-empty';\nimport Navbar from '../../components/Nav/Navbar';\nimport Loading from '../../components/Graphics/Loading';\nimport ProductCard from '../../components/Forms/ProductCard';\n\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toCart = products => {\n      this.setState(_objectSpread({}, this.state, {\n        items: this.state.items + sumItems(products)\n      }));\n      const existing = empty(localStorage.getItem(\"products\")) ? [] : JSON.parse(localStorage.getItem(\"products\"));\n      localStorage.setItem(\"products\", JSON.stringify([...existing, ...products]));\n    };\n\n    this.confirm = () => {\n      confirmAlert({\n        title: 'Product Added to Cart',\n        message: '',\n        buttons: [{\n          label: 'To Cart',\n          onClick: () => this.cancelJob(fee)\n        }, {\n          label: 'Keep Shopping',\n          onClick: () => {}\n        }]\n      });\n    };\n\n    this.state = {\n      loaded: false,\n      items: sumItems(this.props.products)\n    };\n    this.toCart = this.toCart.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.props.db_get_products();\n    const products = empty(localStorage.getItem(\"products\")) ? [] : JSON.parse(localStorage.getItem(\"products\"));\n    this.setState({\n      loaded: true,\n      items: sumItems(products)\n    });\n  }\n\n  render() {\n    let product_list = this.props.products.map(product => React.createElement(ProductCard, {\n      product: product,\n      key: product.id,\n      toCart: this.toCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      active: \"home\",\n      items: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), !this.state.loaded && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), this.state.loaded && React.createElement(\"div\", {\n      className: \"dashboard-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dashboard-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, !empty(product_list) && product_list, empty(product_list) && React.createElement(\"div\", {\n      className: \"thank-you-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontSize: \"1.5rem\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"There are no products currently for sale.\")))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  products: state.products\n});\n\nexport default connect(mapStateToProps, {\n  db_get_products\n})(withRouter(Products));","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/src/containers/Customer/Products.js"],"names":["React","Component","Fragment","Link","withRouter","connect","confirmAlert","db_get_products","sumItems","moment","empty","Navbar","Loading","ProductCard","Products","constructor","props","toCart","products","setState","state","items","existing","localStorage","getItem","JSON","parse","setItem","stringify","confirm","title","message","buttons","label","onClick","cancelJob","fee","loaded","bind","componentDidMount","render","product_list","map","product","id","fontSize","textAlign","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport {db_get_products} from \"../../store/actions/products\";\nimport sumItems from '../../utils/sumItems';\nimport moment from 'moment';\nimport empty from 'is-empty';\n\nimport Navbar from '../../components/Nav/Navbar';\nimport Loading from '../../components/Graphics/Loading';\nimport ProductCard from '../../components/Forms/ProductCard';\n\nclass Products extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloaded: false,\n\t\t\titems: sumItems(this.props.products)\n\t\t};\n\t\tthis.toCart = this.toCart.bind(this);\n\t}\n\n  async componentDidMount() {\n  \tawait this.props.db_get_products();\n  \tconst products = empty(localStorage.getItem(\"products\")) ? [] : JSON.parse(localStorage.getItem(\"products\"));\n  \tthis.setState({\n  \t\tloaded: true,\n  \t\titems: sumItems(products)\n  \t});\n  }\n\n  toCart = products => {\n  \tthis.setState({\n  \t\t...this.state,\n  \t\titems: this.state.items + sumItems(products)\n  \t});\n  \tconst existing = empty(localStorage.getItem(\"products\")) ? [] : JSON.parse(localStorage.getItem(\"products\"));\n  \tlocalStorage.setItem(\"products\", JSON.stringify([...existing, ...products]));\n  }\n\n  confirm = () => {\n    confirmAlert({\n      title: 'Product Added to Cart',\n      message: '',\n      buttons: [\n        {\n          label: 'To Cart',\n          onClick: () => this.cancelJob(fee)\n        },\n        {\n          label: 'Keep Shopping',\n          onClick: () => {}\n        }\n      ]\n    });\n  }\n\n\trender() {\n\n\t\tlet product_list = this.props.products.map(product => \n      <ProductCard \n        product={product}\n        key={product.id}\n        toCart={this.toCart}\n      />\n    );\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Navbar active=\"home\" items={this.state.items}/>\n\t\t\t\t{!this.state.loaded && (<Loading />)}\n\t\t\t\t{this.state.loaded && (<div className=\"dashboard-container\">\n\t\t\t\t\t<div className=\"dashboard-box\">\n\t\t\t\t    {!empty(product_list) && (product_list)}\n            {empty(product_list) && (\n              <div className=\"thank-you-div\">\n                <span style={{fontSize: \"1.5rem\", textAlign: \"center\"}}>There are no products currently for sale.</span>\n              </div>\n            )}\n\t\t\t\t\t</div>\n\t\t\t\t</div>)}\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => ({\n  products: state.products\n});\n\nexport default connect(mapStateToProps, {db_get_products})(withRouter(Products));\n\n\n"]},"metadata":{},"sourceType":"module"}