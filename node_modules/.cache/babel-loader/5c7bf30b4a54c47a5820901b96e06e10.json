{"ast":null,"code":"var _jsxFileName = \"/Users/jackjoliet/Documents/marketplace/front/src/components/Graphics/ImagePicker.js\";\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop'; // import {getCroppedImg} from '../../utils/imageFunctions';\n\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImagePicker extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      crop: {\n        unit: '%',\n        width: 100,\n        aspect: 1 / 1\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.saveImg = () => {\n      this.props.setImg(this.state.croppedImageUrl);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    let currentHideNav = window.innerWidth <= 790;\n\n    if (currentHideNav !== this.state.hideNav) {\n      this.setState({\n        hideNav: currentHideNav\n      });\n    }\n  } // If you setState the crop in here you should return false.\n\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName; // window.URL.revokeObjectURL(this.fileUrl);\n\n        var reader = new FileReader();\n        reader.readAsDataURL(blob);\n\n        reader.onloadend = function () {\n          resolve(reader.result);\n        }; // this.fileUrl = window.URL.createObjectURL(blob);\n\n      }, 'image/jpeg');\n    });\n  }\n\n  Wh() {\n    if (this.imageRef) return this.imageRef.width > this.imageRef.height ? true : false;\n  }\n\n  render() {\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          hideNav = _this$state.hideNav;\n    const src = this.props.src;\n    return React.createElement(\"div\", {\n      className: \"job-overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, src && React.createElement(\"div\", {\n      className: \"overlay-box\",\n      style: hideNav ? {\n        height: \"auto\",\n        width: \"60%\",\n        maxHeight: \"90vh\",\n        maxWidth: \"90vw\"\n      } : {\n        height: \"auto\",\n        width: !this.Wh() ? \"25vw\" : \"40vw\",\n        maxHeight: \"90vh\",\n        maxWidth: \"90vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay-content\",\n      style: {\n        padding: \"1rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image-crop-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"image-btn-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"image-btn\",\n      onClick: this.props.cancel,\n      style: {\n        background: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      className: \"image-btn\",\n      onClick: this.saveImg,\n      style: {\n        background: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default ImagePicker;","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/src/components/Graphics/ImagePicker.js"],"names":["React","PureComponent","ReactCrop","ImagePicker","state","crop","unit","width","aspect","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","saveImg","props","setImg","croppedImageUrl","onCropChange","percentCrop","setState","componentDidMount","window","addEventListener","resize","bind","currentHideNav","innerWidth","hideNav","height","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","reader","FileReader","readAsDataURL","onloadend","result","Wh","render","src","maxHeight","maxWidth","padding","cancel","background"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\n// import {getCroppedImg} from '../../utils/imageFunctions';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImagePicker extends PureComponent {\n  state = {\n    crop: {\n      unit: '%',\n      width: 100,\n      aspect: 1 / 1,\n    }\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    let currentHideNav = (window.innerWidth <= 790);\n      if (currentHideNav !== this.state.hideNav) {\n          this.setState({hideNav: currentHideNav});\n      }\n  }\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  saveImg = () => {\n    this.props.setImg(this.state.croppedImageUrl);\n  }\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        // window.URL.revokeObjectURL(this.fileUrl);\n        var reader = new FileReader();\n        reader.readAsDataURL(blob); \n        reader.onloadend = function() {\n          resolve(reader.result);\n        }\n        // this.fileUrl = window.URL.createObjectURL(blob);\n        \n      }, 'image/jpeg');\n    });\n  }\n\n  Wh() {\n    if(this.imageRef) return this.imageRef.width > this.imageRef.height ? true : false;\n  }\n\n  render() {\n    const { crop, croppedImageUrl, hideNav } = this.state;\n    const { src } = this.props;\n\n    return (\n      <div className=\"job-overlay\">\n        {src && (\n          <div className=\"overlay-box\" style={hideNav ? {height: \"auto\", width: \"60%\", maxHeight: \"90vh\", maxWidth: \"90vw\"} : {height: \"auto\", width: !this.Wh() ? \"25vw\" : \"40vw\", maxHeight: \"90vh\", maxWidth: \"90vw\"}}>\n            <div className=\"overlay-content\" style={{padding: \"1rem\"}}>\n              <div className=\"image-crop-container\">\n                <ReactCrop\n                  src={src}\n                  crop={crop}\n                  onImageLoaded={this.onImageLoaded}\n                  onComplete={this.onCropComplete}\n                  onChange={this.onCropChange}\n                />\n              </div>\n              <div className=\"image-btn-container\">\n                <button className=\"image-btn\" onClick={this.props.cancel} style={{background: \"red\"}}>Cancel</button>\n                <button className=\"image-btn\" onClick={this.saveImg} style={{background: \"green\"}}>Save</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ImagePicker;\n"]},"metadata":{},"sourceType":"module"}