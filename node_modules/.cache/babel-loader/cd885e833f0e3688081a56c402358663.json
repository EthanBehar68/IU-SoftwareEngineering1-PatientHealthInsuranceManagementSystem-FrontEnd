{"ast":null,"code":"import _objectSpread from \"/Users/jackjoliet/Documents/marketplace/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_ASSIGNMENTS, REMOVE_ASSIGNMENT, ADD_ASSIGNMENT, COMPLETE_ASSIGNMENT } from '../types';\n\nconst assignments = (state = [], action) => {\n  switch (action.type) {\n    case GET_ASSIGNMENTS:\n      return [...action.payload];\n\n    case ADD_ASSIGNMENT:\n      return [...state, action.payload];\n\n    case REMOVE_ASSIGNMENT:\n      return state.filter(assignment => {\n        return assignment.assignment_id !== action.payload;\n      });\n\n    case COMPLETE_ASSIGNMENT:\n      return state.map(assignment => {\n        if (assignment.job_id == action.payload.id) return _objectSpread({}, assignment, {\n          status: \"Completed\"\n        });\n        return assignment;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default assignments;","map":{"version":3,"sources":["/Users/jackjoliet/Documents/marketplace/front/src/store/reducers/assignments.js"],"names":["GET_ASSIGNMENTS","REMOVE_ASSIGNMENT","ADD_ASSIGNMENT","COMPLETE_ASSIGNMENT","assignments","state","action","type","payload","filter","assignment","assignment_id","map","job_id","id","status"],"mappings":";AAAA,SAAQA,eAAR,EAAyBC,iBAAzB,EAA4CC,cAA5C,EAA4DC,mBAA5D,QAAsF,UAAtF;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACC,SAAKP,eAAL;AACC,aAAO,CAAC,GAAGM,MAAM,CAACE,OAAX,CAAP;;AACD,SAAKN,cAAL;AACC,aAAO,CAAC,GAAGG,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACD,SAAKP,iBAAL;AACC,aAAOI,KAAK,CAACI,MAAN,CAAaC,UAAU,IAAI;AACjC,eAAOA,UAAU,CAACC,aAAX,KAA6BL,MAAM,CAACE,OAA3C;AACA,OAFM,CAAP;;AAGD,SAAKL,mBAAL;AACC,aAAOE,KAAK,CAACO,GAAN,CAAUF,UAAU,IAAI;AAC9B,YAAGA,UAAU,CAACG,MAAX,IAAqBP,MAAM,CAACE,OAAP,CAAeM,EAAvC,EAA2C,yBAAWJ,UAAX;AAAuBK,UAAAA,MAAM,EAAE;AAA/B;AAC3C,eAAOL,UAAP;AACA,OAHM,CAAP;;AAID;AACC,aAAOL,KAAP;AAfF;AAiBA,CAlBD;;AAoBA,eAAeD,WAAf","sourcesContent":["import {GET_ASSIGNMENTS, REMOVE_ASSIGNMENT, ADD_ASSIGNMENT, COMPLETE_ASSIGNMENT} from '../types';\n\nconst assignments = (state = [], action) => {\n\tswitch(action.type) {\n\t\tcase GET_ASSIGNMENTS:\n\t\t\treturn [...action.payload];\n\t\tcase ADD_ASSIGNMENT:\n\t\t\treturn [...state, action.payload];\n\t\tcase REMOVE_ASSIGNMENT:\n\t\t\treturn state.filter(assignment => {\n\t\t\t\treturn assignment.assignment_id !== action.payload;\n\t\t\t});\n\t\tcase COMPLETE_ASSIGNMENT:\n\t\t\treturn state.map(assignment => {\n\t\t\t\tif(assignment.job_id == action.payload.id) return {...assignment, status: \"Completed\"};\n\t\t\t\treturn assignment;\n\t\t\t});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default assignments;"]},"metadata":{},"sourceType":"module"}